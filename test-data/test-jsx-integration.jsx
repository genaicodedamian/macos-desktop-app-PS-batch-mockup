// Test integration with existing Batch Mockup Smart Object Replacement.jsx
// This script tests if our generated configuration is compatible with the existing engine

// First, let's simulate the engine inclusion (path would need to be adjusted in real usage)
// #include "../script/Batch Mockup Smart Object Replacement.jsx"

// Test configuration generated by our app
var outputOpts = {
  path: '$/_output',
  format: 'jpg',
  zeroPadding: true,
  filename: '@input_@mockup'
};

// Test mockups array with configurations that our app would generate
var testMockups = [
  {
    output: outputOpts,
    mockupPath: './test-data/mockup-files/mockup1.psd',
    smartObjects: [
      {
        target: 'smart object 1',
        input: './test-data/input-files',
        align: 'center center',
        resize: 'fill'
      },
      {
        target: 'smart object 2',
        input: './test-data/input-files',
        align: 'left top',
        resize: 'fit'
      }
    ]
  },
  {
    output: outputOpts,
    mockupPath: './test-data/mockup-files/mockup2.psd',
    smartObjects: [
      {
        target: 'logo',
        input: './test-data/input-files',
        align: 'center center',
        resize: 'fill'
      }
    ]
  }
];

// Validation function to check if our configuration matches expected format
function validateMockupConfiguration(mockups) {
  var errors = [];
  
  if (!Array.isArray(mockups)) {
    errors.push("Mockups should be an array");
    return errors;
  }
  
  for (var i = 0; i < mockups.length; i++) {
    var mockup = mockups[i];
    var mockupIndex = i + 1;
    
    // Check required properties
    if (!mockup.output) {
      errors.push("Mockup " + mockupIndex + ": missing 'output' property");
    }
    
    if (!mockup.mockupPath || typeof mockup.mockupPath !== 'string') {
      errors.push("Mockup " + mockupIndex + ": missing or invalid 'mockupPath'");
    }
    
    if (!mockup.smartObjects || !Array.isArray(mockup.smartObjects)) {
      errors.push("Mockup " + mockupIndex + ": missing or invalid 'smartObjects' array");
      continue;
    }
    
    // Check smartObjects
    for (var j = 0; j < mockup.smartObjects.length; j++) {
      var smartObject = mockup.smartObjects[j];
      var soIndex = j + 1;
      
      if (!smartObject.target || typeof smartObject.target !== 'string') {
        errors.push("Mockup " + mockupIndex + ", SmartObject " + soIndex + ": missing or invalid 'target'");
      }
      
      if (!smartObject.input || typeof smartObject.input !== 'string') {
        errors.push("Mockup " + mockupIndex + ", SmartObject " + soIndex + ": missing or invalid 'input'");
      }
      
      if (!smartObject.align || typeof smartObject.align !== 'string') {
        errors.push("Mockup " + mockupIndex + ", SmartObject " + soIndex + ": missing or invalid 'align'");
      }
      
      if (!smartObject.resize || typeof smartObject.resize !== 'string') {
        errors.push("Mockup " + mockupIndex + ", SmartObject " + soIndex + ": missing or invalid 'resize'");
      }
      
      // Validate align options
      var validAlignOptions = [
        'left top', 'left center', 'left bottom',
        'center top', 'center center', 'center bottom',
        'right top', 'right center', 'right bottom'
      ];
      
      if (validAlignOptions.indexOf(smartObject.align) === -1) {
        errors.push("Mockup " + mockupIndex + ", SmartObject " + soIndex + ": invalid 'align' value: " + smartObject.align);
      }
      
      // Validate resize options
      var validResizeOptions = ['fit', 'fill', 'fillX', 'fillY'];
      if (validResizeOptions.indexOf(smartObject.resize) === -1) {
        errors.push("Mockup " + mockupIndex + ", SmartObject " + soIndex + ": invalid 'resize' value: " + smartObject.resize);
      }
    }
  }
  
  return errors;
}

// Test our configuration
var validationErrors = validateMockupConfiguration(testMockups);

if (validationErrors.length === 0) {
  alert("‚úÖ JSX Integration Test Passed!\n\nGenerated configuration is compatible with the existing engine.\n\nTest mockups: " + testMockups.length + "\nTotal smart objects: " + testMockups.reduce(function(total, mockup) { return total + mockup.smartObjects.length; }, 0));
} else {
  alert("‚ùå JSX Integration Test Failed!\n\nErrors found:\n" + validationErrors.join("\n"));
}

// Test output format compatibility
function testOutputConfiguration(output) {
  var errors = [];
  
  if (!output.path) {
    errors.push("Output: missing 'path'");
  }
  
  var validFormats = ['jpg', 'png', 'tif', 'psd', 'pdf'];
  if (output.format && validFormats.indexOf(output.format) === -1) {
    errors.push("Output: invalid format '" + output.format + "'. Valid formats: " + validFormats.join(', '));
  }
  
  if (typeof output.zeroPadding !== 'boolean' && output.zeroPadding !== undefined) {
    errors.push("Output: 'zeroPadding' should be boolean");
  }
  
  return errors;
}

var outputErrors = testOutputConfiguration(outputOpts);
if (outputErrors.length > 0) {
  alert("‚ùå Output Configuration Test Failed!\n\nErrors:\n" + outputErrors.join("\n"));
} else {
  alert("‚úÖ Output Configuration Test Passed!");
}

// Summary
alert("üß™ JSX Integration Tests Completed!\n\n" +
      "Configuration validation: " + (validationErrors.length === 0 ? "‚úÖ PASSED" : "‚ùå FAILED") + "\n" +
      "Output format validation: " + (outputErrors.length === 0 ? "‚úÖ PASSED" : "‚ùå FAILED") + "\n\n" +
      "The generated JSX is ready for use with the existing Batch Mockup Smart Object Replacement.jsx engine.");
